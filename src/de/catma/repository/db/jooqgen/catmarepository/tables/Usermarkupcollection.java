/**
 * This class is generated by jOOQ
 */
package de.catma.repository.db.jooqgen.catmarepository.tables;


import de.catma.repository.db.jooqgen.catmarepository.Catmarepository;
import de.catma.repository.db.jooqgen.catmarepository.Keys;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Record;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
	value = {
		"http://www.jooq.org",
		"jOOQ version:3.7.2"
	},
	comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Usermarkupcollection extends TableImpl<Record> {

	private static final long serialVersionUID = 162857634;

	/**
	 * The reference instance of <code>catmarepository.usermarkupcollection</code>
	 */
	public static final Usermarkupcollection USERMARKUPCOLLECTION = new Usermarkupcollection();

	/**
	 * The class holding records for this type
	 */
	@Override
	public Class<Record> getRecordType() {
		return Record.class;
	}

	/**
	 * The column <code>catmarepository.usermarkupcollection.usermarkupCollectionID</code>.
	 */
	public final TableField<Record, Integer> USERMARKUPCOLLECTIONID = createField("usermarkupCollectionID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>catmarepository.usermarkupcollection.title</code>.
	 */
	public final TableField<Record, String> TITLE = createField("title", org.jooq.impl.SQLDataType.VARCHAR.length(300), this, "");

	/**
	 * The column <code>catmarepository.usermarkupcollection.publisher</code>.
	 */
	public final TableField<Record, String> PUBLISHER = createField("publisher", org.jooq.impl.SQLDataType.VARCHAR.length(300), this, "");

	/**
	 * The column <code>catmarepository.usermarkupcollection.author</code>.
	 */
	public final TableField<Record, String> AUTHOR = createField("author", org.jooq.impl.SQLDataType.VARCHAR.length(300), this, "");

	/**
	 * The column <code>catmarepository.usermarkupcollection.description</code>.
	 */
	public final TableField<Record, String> DESCRIPTION = createField("description", org.jooq.impl.SQLDataType.VARCHAR.length(300), this, "");

	/**
	 * The column <code>catmarepository.usermarkupcollection.sourceDocumentID</code>.
	 */
	public final TableField<Record, Integer> SOURCEDOCUMENTID = createField("sourceDocumentID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * The column <code>catmarepository.usermarkupcollection.tagLibraryID</code>.
	 */
	public final TableField<Record, Integer> TAGLIBRARYID = createField("tagLibraryID", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

	/**
	 * Create a <code>catmarepository.usermarkupcollection</code> table reference
	 */
	public Usermarkupcollection() {
		this("usermarkupcollection", null);
	}

	/**
	 * Create an aliased <code>catmarepository.usermarkupcollection</code> table reference
	 */
	public Usermarkupcollection(String alias) {
		this(alias, USERMARKUPCOLLECTION);
	}

	private Usermarkupcollection(String alias, Table<Record> aliased) {
		this(alias, aliased, null);
	}

	private Usermarkupcollection(String alias, Table<Record> aliased, Field<?>[] parameters) {
		super(alias, Catmarepository.CATMAREPOSITORY, aliased, parameters, "");
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Identity<Record, Integer> getIdentity() {
		return Keys.IDENTITY_USERMARKUPCOLLECTION;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public UniqueKey<Record> getPrimaryKey() {
		return Keys.KEY_USERMARKUPCOLLECTION_PRIMARY;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<UniqueKey<Record>> getKeys() {
		return Arrays.<UniqueKey<Record>>asList(Keys.KEY_USERMARKUPCOLLECTION_PRIMARY);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public List<ForeignKey<Record, ?>> getReferences() {
		return Arrays.<ForeignKey<Record, ?>>asList(Keys.FK_UMC_SOURCEDOCUMENTID, Keys.FK_UMC_TAGLIBRARYID);
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	public Usermarkupcollection as(String alias) {
		return new Usermarkupcollection(alias, this);
	}

	/**
	 * Rename this table
	 */
	public Usermarkupcollection rename(String name) {
		return new Usermarkupcollection(name, null);
	}
}
